name: Build EXE with fake_useragent fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Pre-download fake_useragent data
      run: |
        echo "正在预下载fake_useragent数据..."
        python -c "
        try:
            from fake_useragent import UserAgent
            import os
            import shutil
            from pathlib import Path
            
            # 初始化UserAgent，触发数据下载
            ua = UserAgent()
            ua.random  # 触发数据下载
            print('✅ fake_useragent数据下载完成')
            
            # 找到数据文件位置并复制
            import fake_useragent
            fa_path = Path(fake_useragent.__file__).parent
            data_dir = fa_path / 'data'
            
            if data_dir.exists():
                # 复制到项目目录
                project_data_dir = Path('fake_useragent_data')
                if project_data_dir.exists():
                    shutil.rmtree(project_data_dir)
                shutil.copytree(data_dir, project_data_dir)
                print(f'✅ 数据文件已复制到: {project_data_dir}')
                
                # 列出复制的文件
                for file in project_data_dir.rglob('*'):
                    if file.is_file():
                        print(f'📁 {file}')
            else:
                print('⚠️  未找到data目录')
                
        except Exception as e:
            print(f'❌ 准备fake_useragent数据失败: {e}')
            # 创建一个最小的数据目录
            import os
            os.makedirs('fake_useragent_data', exist_ok=True)
            print('📁 创建了最小数据目录')
        "
    
    - name: Verify fake_useragent data
      run: |
        echo "验证fake_useragent数据..."
        if (Test-Path fake_useragent_data) {
            echo "✅ fake_useragent_data目录存在"
            Get-ChildItem -Recurse fake_useragent_data | ForEach-Object { echo "📁 $($_.FullName)" }
        } else {
            echo "❌ fake_useragent_data目录不存在"
        }
    
    - name: Build EXE with PyInstaller
      run: |
        echo "正在编译exe文件..."
        pyinstaller --onefile --console --name mzzbscore `
          --add-data "fake_useragent_data/*;fake_useragent/data/" `
          --hidden-import fake_useragent.data `
          --hidden-import fake_useragent.utils `
          --hidden-import fake_useragent.errors `
          --hidden-import fake_useragent.settings `
          --hidden-import twscrape `
          --hidden-import twscrape.api `
          --hidden-import twscrape.gather `
          --hidden-import asyncio `
          --hidden-import aiohttp `
          --hidden-import lxml `
          --hidden-import pandas `
          --hidden-import openpyxl `
          --hidden-import concurrent.futures `
          --hidden-import threading `
          --hidden-import json `
          --hidden-import urllib.parse `
          --hidden-import html `
          --collect-submodules src `
          --collect-submodules utils `
          --collect-submodules models `
          main.py
    
    - name: Verify build output
      run: |
        echo "验证编译输出..."
        if (Test-Path dist\mzzbscore.exe) {
            $size = (Get-Item dist\mzzbscore.exe).Length / 1MB
            echo "✅ 编译成功！文件大小: $([math]::Round($size, 1)) MB"
            echo "📍 文件位置: $(Get-Item dist\mzzbscore.exe | Select-Object -ExpandProperty FullName)"
        } else {
            echo "❌ 编译失败，未找到exe文件"
            exit 1
        }
    
    - name: Test EXE basic functionality
      run: |
        echo "测试exe基本功能..."
        # 创建一个简单的测试，检查exe是否能启动并识别缺少Excel文件
        # 注意：这里可能会因为缺少Excel文件而失败，但这是预期的
        try {
            $process = Start-Process -FilePath "dist\mzzbscore.exe" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
            echo "🧪 exe进程退出代码: $($process.ExitCode)"
            echo "📄 输出内容:"
            if (Test-Path "test_output.txt") { Get-Content "test_output.txt" }
            echo "📄 错误内容:"
            if (Test-Path "test_error.txt") { Get-Content "test_error.txt" }
        } catch {
            echo "⚠️  测试过程中出现异常: $($_.Exception.Message)"
            echo "💡 这可能是正常的，因为缺少Excel文件"
        }
    
    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: mzzbscore-exe
        path: dist/mzzbscore.exe
        
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs
        path: |
          build/
          test_output.txt
          test_error.txt
        
    - name: Create Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/mzzbscore.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}