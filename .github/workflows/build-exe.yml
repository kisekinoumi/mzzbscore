name: Build EXE with fake_useragent fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create fake_useragent prepare script
      run: |
        echo "Creating fake_useragent prepare script..."
        echo "import sys" > prepare_fake_useragent.py
        echo "import os" >> prepare_fake_useragent.py
        echo "import shutil" >> prepare_fake_useragent.py
        echo "from pathlib import Path" >> prepare_fake_useragent.py
        echo "" >> prepare_fake_useragent.py
        echo "# 设置UTF-8编码输出" >> prepare_fake_useragent.py
        echo "if sys.platform == 'win32':" >> prepare_fake_useragent.py
        echo "    import io" >> prepare_fake_useragent.py
        echo "    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')" >> prepare_fake_useragent.py
        echo "    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')" >> prepare_fake_useragent.py
        echo "" >> prepare_fake_useragent.py
        echo "try:" >> prepare_fake_useragent.py
        echo "    from fake_useragent import UserAgent" >> prepare_fake_useragent.py
        echo "    ua = UserAgent()" >> prepare_fake_useragent.py
        echo "    ua.random" >> prepare_fake_useragent.py
        echo "    print('[SUCCESS] fake_useragent数据下载完成')" >> prepare_fake_useragent.py
        echo "    import fake_useragent" >> prepare_fake_useragent.py
        echo "    fa_path = Path(fake_useragent.__file__).parent" >> prepare_fake_useragent.py
        echo "    data_dir = fa_path / 'data'" >> prepare_fake_useragent.py
        echo "    if data_dir.exists():" >> prepare_fake_useragent.py
        echo "        project_data_dir = Path('fake_useragent_data')" >> prepare_fake_useragent.py
        echo "        if project_data_dir.exists():" >> prepare_fake_useragent.py
        echo "            shutil.rmtree(project_data_dir)" >> prepare_fake_useragent.py
        echo "        shutil.copytree(data_dir, project_data_dir)" >> prepare_fake_useragent.py
        echo "        print(f'[SUCCESS] 数据文件已复制到: {project_data_dir}')" >> prepare_fake_useragent.py
        echo "        for file in project_data_dir.rglob('*'):" >> prepare_fake_useragent.py
        echo "            if file.is_file():" >> prepare_fake_useragent.py
        echo "                print(f'[FILE] {file}')" >> prepare_fake_useragent.py
        echo "    else:" >> prepare_fake_useragent.py
        echo "        print('[WARNING] 未找到data目录')" >> prepare_fake_useragent.py
        echo "except Exception as e:" >> prepare_fake_useragent.py
        echo "    print(f'[ERROR] 准备fake_useragent数据失败: {e}')" >> prepare_fake_useragent.py
        echo "    os.makedirs('fake_useragent_data', exist_ok=True)" >> prepare_fake_useragent.py
        echo "    print('[INFO] 创建了最小数据目录')" >> prepare_fake_useragent.py
    
    - name: Pre-download fake_useragent data
      run: |
        echo "正在预下载fake_useragent数据..."
        python prepare_fake_useragent.py
    
    - name: Verify fake_useragent data
      run: |
        echo "验证fake_useragent数据..."
        if (Test-Path fake_useragent_data) {
            echo "[SUCCESS] fake_useragent_data目录存在"
            Get-ChildItem -Recurse fake_useragent_data | ForEach-Object { echo "[FILE] $($_.FullName)" }
        } else {
            echo "[ERROR] fake_useragent_data目录不存在"
        }
    
    - name: Build EXE with PyInstaller
      run: |
        echo "正在编译exe文件..."
        pyinstaller --onefile --console --name mzzbscore `
          --add-data "fake_useragent_data/*;fake_useragent/data/" `
          --hidden-import fake_useragent.data `
          --hidden-import fake_useragent.utils `
          --hidden-import fake_useragent.errors `
          --hidden-import fake_useragent.settings `
          --hidden-import twscrape `
          --hidden-import twscrape.api `
          --hidden-import twscrape.gather `
          --hidden-import asyncio `
          --hidden-import aiohttp `
          --hidden-import lxml `
          --hidden-import pandas `
          --hidden-import openpyxl `
          --hidden-import concurrent.futures `
          --hidden-import threading `
          --hidden-import json `
          --hidden-import urllib.parse `
          --hidden-import html `
          --collect-submodules src `
          --collect-submodules utils `
          --collect-submodules models `
          main.py
    
    - name: Verify build output
      run: |
        echo "验证编译输出..."
        if (Test-Path dist\mzzbscore.exe) {
            $size = (Get-Item dist\mzzbscore.exe).Length / 1MB
            $sizeRounded = [math]::Round($size, 1)
            echo "[SUCCESS] 编译成功！文件大小: $sizeRounded MB"
            $fullPath = (Get-Item dist\mzzbscore.exe | Select-Object -ExpandProperty FullName)
            echo "[INFO] 文件位置: $fullPath"
        } else {
            echo "[ERROR] 编译失败，未找到exe文件"
            exit 1
        }
    
    - name: Test EXE basic functionality
      run: |
        echo "测试exe基本功能..."
        try {
            $process = Start-Process -FilePath "dist\mzzbscore.exe" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "test_output.txt" -RedirectStandardError "test_error.txt"
            echo "[TEST] exe进程退出代码: $($process.ExitCode)"
            echo "[OUTPUT] 输出内容:"
            if (Test-Path "test_output.txt") { Get-Content "test_output.txt" }
            echo "[ERROR] 错误内容:"
            if (Test-Path "test_error.txt") { Get-Content "test_error.txt" }
        } catch {
            echo "[WARNING] 测试过程中出现异常: $($_.Exception.Message)"
            echo "[INFO] 这可能是正常的，因为缺少Excel文件"
        }
    
    - name: Clean up temporary files
      run: |
        echo "清理临时文件..."
        if (Test-Path "prepare_fake_useragent.py") {
            Remove-Item "prepare_fake_useragent.py"
            echo "[INFO] 已删除临时脚本文件"
        }
    
    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: mzzbscore-exe
        path: dist/mzzbscore.exe
        
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-logs
        path: |
          build/
          test_output.txt
          test_error.txt
        
    - name: Create Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/mzzbscore.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}