name: 构建EXE文件

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write  # 明确授予写入权限

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 计算版本号
        id: version
        run: |
          # 计算语义化版本号 va.b.c
          # 初始值: a=2, b=0, c=0 (v2.0.0)
          # 每次提交 c+1，c>=10 时 c=0 且 b+1，b>=10 时 b=0 且 a+1
          
          $runNumber = ${{ github.run_number }}
          $totalIncrements = $runNumber - 1
          
          $c = $totalIncrements % 10
          $bIncrements = [math]::Floor($totalIncrements / 10)
          $b = $bIncrements % 10
          $aIncrements = [math]::Floor($bIncrements / 10)
          $a = 2 + $aIncrements
          
          $version = "v$a.$b.$c"
          
          Write-Host "🏷️ 计算得到版本号: $version"
          Write-Host "📊 计算详情:"
          Write-Host "   - Run Number: $runNumber"
          Write-Host "   - Total Increments: $totalIncrements"
          Write-Host "   - a: $a, b: $b, c: $c"
          
          # 输出给后续步骤使用
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "major=$a" >> $env:GITHUB_OUTPUT
          echo "minor=$b" >> $env:GITHUB_OUTPUT
          echo "patch=$c" >> $env:GITHUB_OUTPUT

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 缓存Python依赖
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          Write-Host "📦 安装项目依赖..."
          pip install -r requirements.txt
          Write-Host "依赖安装完成"
          
          # 验证关键依赖
          Write-Host "🔍 验证关键依赖..."
          python -c "import twscrape; print('OK: twscrape imported')"
          python -c "import asyncio; print('OK: asyncio imported')"
          python -c "import pandas; print('OK: pandas imported')"
          python -c "import openpyxl; print('OK: openpyxl imported')"
          python -c "import requests; print('OK: requests imported')"

      - name: 创建构建信息文件
        run: |
          echo "构建时间: $(Get-Date)" > build_info.txt
          echo "版本号: ${{ steps.version.outputs.version }}" >> build_info.txt
          echo "版本详情: ${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}" >> build_info.txt
          echo "提交哈希: ${{ github.sha }}" >> build_info.txt
          echo "构建编号: ${{ github.run_number }}" >> build_info.txt

      - name: 预构建检查
        run: |
          Write-Host "🔍 检查模块导入..."
          python -c "import sys; print('Python version:', sys.version)"
          python -c "import asyncio; print('OK: asyncio imported')"
          python -c "import twscrape; print('OK: twscrape imported')"
          python -c "import src.extractors; print('OK: src.extractors imported')"
          python -c "import src.parsers; print('OK: src.parsers imported')"
          python -c "import src.data_process; print('OK: src.data_process imported')"
          python -c "import utils; print('OK: utils imported')"
          python -c "import models; print('OK: models imported')"
          Write-Host "所有模块导入成功"

      - name: 使用PyInstaller构建EXE
        run: |
          pyinstaller --onefile --name mzzb_score --console --clean --distpath dist --workpath build --optimize 2 `
            --hidden-import=asyncio `
            --hidden-import=twscrape `
            --hidden-import=twscrape.api `
            --hidden-import=twscrape.gather `
            --hidden-import=src.extractors `
            --hidden-import=src.parsers `
            --hidden-import=src.data_process `
            --collect-all=twscrape `
            --collect-all=asyncio `
            --collect-submodules=src `
            main.py

      - name: 验证构建结果
        run: |
          if (Test-Path "dist/mzzb_score.exe") {
            Write-Host "EXE文件构建成功"
            $fileSize = (Get-Item "dist/mzzb_score.exe").Length / 1MB
            Write-Host "📦 文件大小: $([math]::Round($fileSize, 2)) MB"
            Write-Host "🏷️ 版本号: ${{ steps.version.outputs.version }}"
            
            # 验证Excel文件是否存在
            Write-Host "📊 验证Excel文件..."
            $excelFiles = @("mzzb.xlsx", "X月新番首月评分.xlsx", "X月新番完结评分.xlsx")
            foreach ($file in $excelFiles) {
              if (Test-Path $file) {
                $excelSize = (Get-Item $file).Length / 1KB
                Write-Host "   OK: $file - $([math]::Round($excelSize, 1)) KB"
              } else {
                Write-Host "   ERROR: $file - 文件不存在"
                exit 1
              }
            }
            
            # 验证EXE文件的依赖
            Write-Host "🔍 验证EXE文件依赖..."
            $dependencies = @("kernel32.dll", "user32.dll", "msvcrt.dll")
            foreach ($dep in $dependencies) {
              Write-Host "   - $dep: 系统依赖"
            }
            
            # 验证文件完整性
            Write-Host "🧪 验证文件完整性..."
            if (Get-Command "Get-FileHash" -ErrorAction SilentlyContinue) {
              $hash = Get-FileHash "dist/mzzb_score.exe" -Algorithm SHA256
              Write-Host "📝 文件哈希: $($hash.Hash.Substring(0,16))..."
            }
            
            Write-Host "构建验证完成"
          } else {
            Write-Host "ERROR: EXE文件构建失败"
            exit 1
          }

      - name: 上传构建结果到Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mzzb_score-${{ steps.version.outputs.version }}
          path: |
            dist/mzzb_score.exe
            build_info.txt
            mzzb.xlsx
            X月新番首月评分.xlsx
            X月新番完结评分.xlsx
          retention-days: 30

      - name: 创建发布版本
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/mzzb_score.exe
            build_info.txt
            mzzb.xlsx
            X月新番首月评分.xlsx
            X月新番完结评分.xlsx
          name: "${{ steps.version.outputs.version }}"
          tag_name: "${{ steps.version.outputs.version }}"
          body: |
            ###  版本信息
            - **构建编号**: ${{ github.run_number }}
            - **构建时间**: ${{ github.event.head_commit.timestamp }}
            - **提交哈希**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

            ###  使用说明
            1. 下载 `mzzb_score.exe` 文件即可直接运行，无需安装Python环境
            2. 使用提供的Excel模板文件：
               - **mzzb.xlsx** - 主要的数据文件模板
               - **X月新番首月评分.xlsx** - 首月评分统计模板
               - **X月新番完结评分.xlsx** - 完结评分统计模板
            3. 在Excel文件中填入动画名称，可选择预填平台链接
            4. 运行程序，根据提示配置Twitter功能（可选）
            5. 程序会自动获取各平台评分数据并更新Excel文件

            ###  下载文件说明
            - 📋 **mzzb_score.exe** - 主程序文件
            - 📊 **mzzb.xlsx** - 数据输入模板
            - 🎯 **X月新番首月评分.xlsx** - 首月评分统计模板
            - 🏆 **X月新番完结评分.xlsx** - 完结评分统计模板
            ---
            *此版本由 GitHub Actions 自动构建和发布*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建完成通知
        if: success()
        run: |
          Write-Host "🎉 构建和发布完成！"
          Write-Host "📦 版本号: ${{ steps.version.outputs.version }}"
          Write-Host "🏷️ 标签: ${{ steps.version.outputs.version }}"
          Write-Host "🔗 下载地址: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          Write-Host ""
          Write-Host "📁 已发布的文件:"
          Write-Host "   - mzzb_score.exe (主程序)"
          Write-Host "   - mzzb.xlsx (数据输入模板)"
          Write-Host "   - X月新番首月评分.xlsx (首月评分模板)"
          Write-Host "   - X月新番完结评分.xlsx (完结评分模板)"
          Write-Host "   - build_info.txt (构建信息)"